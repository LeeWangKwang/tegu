#!/usr/bin/env ksh
#	Mnemonic:	mk_deb.ksh
#	Abstract:	This script expects to find a tar file in /tmp/<username>/export/bundle that has
#				been generated by export.ksh (this directory) ane will bundle it into a .deb file.
#				Files in ./<pkgname>_debian are used as templates and placed into the bundle
#				directory in /tmp before the package is created. This script expects to be executed
# 				from this source directory.
#	Author: 	E. Scott Daniels
#	Date:		May 2014
# -----------------------------------------------------------------------------------------------

function clean_house
{
	trap - EXIT
	echo "something failed or you aborted"
	exit 1
}

function clean_exit
{
	trap - EXIT
	exit ${1:0}
}

function usage
{
	echo ""
	echo "version 1.0"
	echo "usage: $argv0 <pkg-name> <version> [cleanup]"
	echo "	cleanup causes a cleanup of the named version and no building"
}
# -------------------------------------------------------------------------------------------------

user=${LOGNAME:-$USER}
argv0=$0
arch="amd64"
who="Scott Daniels <daniels@research.att.com>"
confirm=0

if [[ $1 == -? ]]
then
	usage
	exit 0
fi

pkg_name="$1"
full_pkg_name="attlr$1"
ver=$2
cleanup=$3

if [[ -z $pkg_name || -z $ver ]]
then
	echo "missing positional parameters  [FAIL]"
	usage
	exit 1
fi

src_dir=$PWD
if [[ ! -d ${pkg_name}_debian ]]
then
	echo "cannot find debian files directory in $src_dir: ${pkg_name}_debian  [FAIL]"
	exit 1
fi

bundle_dir=/tmp/$user/export/bundle 
if [[ ! -d $bundle_dir ]]
then
	echo "cannot find bundle directory:  /tmp/$user/export/bundle  [FAIL]"
	exit 1
fi

set -e									# lazy way out
trap "clean_house" 1 2 3 15 EXIT 		# purge everything on failure or exit

cd $bundle_dir 
rtar=$bundle_dir/${full_pkg_name}-${ver}.tar.gz
otar=$bundle_dir/${full_pkg_name}_${ver}.orig.tar.gz
release=$bundle_dir/${full_pkg_name}_${ver}

if [[ -d $release  ]]
then
	echo "backup old directory"
	if [[ -d $release- ]]
	then
		rm -fr $release-
	fi
	mv $release $release-
fi

for x in $release-1_amd64.build $release-1_amd64.changes $release-1_amd64.deb $release-1.diff.gz $release-1.dsc 
do
	#echo "removing $x"
	rm -f $x
done

if [[ $cleanup == "cleanup" ]]			# only invoked to clean 
then
	trap - EXIT
	exit 0
fi


if [[ -e $rtar ]]
then
	echo "using $rtar"
	mv $rtar $otar
else
	if [[ -e $otar ]]
	then
		if (( confirm ))
		then
			echo "cannot find: $rtar"
			printf "$otar exists: use it? [yN]"
			read ans
		else
			ans=y
		fi
		if [[ $ans != "y" ]]
		then
			clean_exit
		fi
	else
		printf "cannot find a tar.gz file to use.\n"
		clean_exit 1
	fi
fi

echo "making release directoryy $release"
mkdir -p $release
cd $release
rm -fr lib
echo "unpack tar"
gzip -dc $otar | tar -xf -

#cp $src_dir/${pkg_name}_debian/Makefile .

echo "'copy' debian directory into new stuff"
(
	mkdir -p DEBIAN
	ls $src_dir/${pkg_name}_debian/[a-z]* | while read f
	do
		cp $f DEBIAN/
	done
)


edit=1
if [[ -f ../changelog.$ver ]]						# if one from a previous run, don't make them edit it again
then
	cp ../changelog.$ver DEBIAN/changelog

	if (( confirm ))
	then
		printf "previous change log used; edit it? [Yn]"
		read ans
	else
		ans=n
	fi
	if [[ $ans == "n" ]]
	then
		edit=0
	fi
else
	# CAUTION -- the change log parser is way too sensitive -- leading spaces tabs seem to matter
	date=$(date -R)
	cat <<endKat >DEBIAN/changelog
attlr${pkg-name} (${ver}-1) UNRELEASED; urgency=low

  * Bug Fixes. (Closes: #xxx)

 -- $who $date
endKat

	echo "a new change log was created, you must edit it"
	echo "press return to edit"
	read foo
fi

if (( edit ))
then
	vi DEBIAN/changelog
	cp DEBIAN/changelog ../changelog.$ver
fi


if (( confirm ))
then
	printf "run debuild [yN]? "
	read ans
else
	ans=y
fi
if [[ $ans == "y"* ]]
then
	#debuild -us -uc
	cd ..
	set -x
	dpkg-deb -b  $release ${full_pkg_name}_${ver}_$arch.deb
	set +x
else
	echo "make any changes needed and then run 'debuild -us -uc'"
fi

trap - EXIT
exit 0

exit
#0) build tar on daniels8 (export.ksh)
#
#1) fetch src tar and rename:
#	scp daniels@qos101.research.att.com:attlrqlite-${ver}.tar.gz attlrqlite_${ver}.orig.tar.gz
#	NOTE: the - in the original name needs to be an underbar in the 'orig' name or the bloody package software complains
#
#2) untar and adjust/add files in debian directory (we create, not in the source)
#
# 3) add the makefile to the directory
##3) run: debuild -us -uc
