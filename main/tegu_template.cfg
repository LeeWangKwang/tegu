# tegu configuration file TEMPLATE
# This should be filled in  (==.*== strings replaced) by a chef script, or manually, and copied to 
# tegu.cfg.  The template exists to prevent accidental overlay by a reinstall or
# upgrade of the debian package. 

# tegu configuration file

# ---- Default section info used by multiple subsystems ---------------------------------------------------

# 	sdn_host supplies the host:port of the openflow controller Comment it out to use the static 
#	physical graph and thus "tegu-lite".
#
#	static_phys_graph supplies the file name containing the static graph which is simulated openflow 
#		controller output (json) when not using an openflow controller (tegu-lite). Supplying both
#		sdn_host and graph file, results in the sdn being used and not the static map.
#
#	queue_type is either "endpoint" or "all". When endpoint is supplied (the default) then the queue
#		settings generated are only applied to the endpoints of the path (egress and ingress) assuming
#		that intermediat switches have generic flow-mod rules and queues for pushing prioritised traffic.
#		It also affects the flow-mods generated.  When "endpoint" is supplied, flow-mods at the ingress
#		and egress switches are all that are generated. 
#
#	log_dir sets the directory where log files are written (cycled daily); use "stderr" to write
#		log messages to standard error
#
#	pri_dscp is a space separated list of DSCP values that might be set by applications that are running
#		on VMs that have reservations.  These values are preserved in packets as they exit the environment.
#		(It is not possible to preserve all by default as that would require 64 flow-mods per reservation
#		on both the ingress and egress switches.)
#
#sdn_host = "<host>:<port>"
static_phys_graph = "/etc/tegu/phys_net_static.json"
queue_type = "endpoint"
log_dir = /var/log/tegu
pri_dscp = "40 41 42"


# ----- network manager settings 	------------------------------------------------------------------------
#	refresh is the delay between refreshes of the network topology either from the static file or from the 
#		SDN controller (floodlight).
#
#  link_headroom indicated the percentage of headroom that each link is to be given; reservations may use up
#		up to the link capacity less this percentage. 
#
#  link alarm is the percentage of a link's capacity that once reserved for a given time period will cause
#		an alarm. 
#
#  paths affects how Tegu will reserve bandwidth on path(s) between endpoints. The accepted values for this
#		variable are:
#			mlag - find shortest path, but increase usage on all mlag links that are traversed
#			shortest - find the shortest path and ignore mlags
#			all - find all paths and set the usage on all links.
#
#  user_link_cap is the percentage of link capacity that any single user will be allowed to reserve. This
#		limit can be increased on a per user basis by sending a setulcap request via the API.  If the value
#		given here is set to 100, then no limits for any users are set, EXCEPT if an api call is made
#		to set a limit on a specific user. A value of 0% causes all reservations to be rejected unless there
#		is a specific capacity set for a tenant (via a setulcap request).
#
:network
	paths = mlag
	link_headroom = 10%
	link_alarm = 95%
	refresh = 30
	verbose = 1
	user_link_cap = 0%

# ----- flowod/queue manager settings ----------------------------------------------------------------------
#	queue_check is the frequency (seconds) of checks for expiring queues.
#
#	host_check is the frequency (seconds) that openstack is querried for a host list
#
#	default_dscp is the DSCP value that is used to mark a priority flow over intermediate switches
:fqmgr
	queue_check = 5
	host_check	= 30
	default_dscp = 42
	verbose = 1


# ----- resource manager settings --------------------------------------------------------------------------
#	hto_limit is the max number of seconds that will be sent to the agent as a hard timeout value for 
#			flow-mods.  OVS, and maybe other switches, won't accept hard timeout values much larger than 64800.
#			For reservations that are longer than this (about 18 hours) Tegu will refresh the flow-mods so that 
#			they will not be removed until after the reservation expires.  The default is 64800, and if set to
#			less than an hour might cause tegu to not refresh them quickly enough.  Setting to 0 turns the limit
#			off and Tegu will send the expiry value to the agent (who might truncate it) as a full value and will 
#			NOT refresh reservations. Use 0 only when reservations are going to be less than 18 hours in duration.
#
#	res_refresh is the frequency (seconds) that Tegu will refresh reservation flow-mods. This is used only if
#			hto_limit is not zero and should not be set less than 900 seconds because of the potential 
#			overhead involved with sending out flow-mods.  The default when omitted is 1 hour (3600 seconds)
:resmgr
	chkpt_dir = /var/lib/tegu/chkpt
	verbose = 1
	#hto_limit = 64800
	#res_refresh = 3600

# ----- flomod/queue manager -------------------------------------------------------------------------------
:fqmgr
	queue_check = 5
	host_check = 30
	verbose = 1

# Describes parameters which are used only by the http interface. The http manager will enable SSL/TLS mode
# (https:// secure interface) when the key and cert pahtnames are given; otherwise (when missing, empty strings
# or commented out) secure interface is disabled and communcations will be via http://.
#
# cert and key are filenames that contain the certificate and private key. If the same file contains both, 
# 	then the same name should be supplied on both entries.
#
# create_cert, when set to true, will cause Tegu to generate a selfsigned certificate and key (using the 
#	filenames given). This is mostly for testing. 
# 
:httpmgr
	#cert = "==CERT_FNAME=="
	#key = "==KEY_FNAME=="
	#create_cert = false

:agent
	port = 29055
	verbose = 1

# openstack interface specific parameters
# ostack_list is a comma (or space) sep list of section names  that appear later in the config file, or project 
#		(tenant) names; the list may contain a mixture. When a project name is given, it is assumed to use the 
#		default values for usr, password and url that are given in the main section. If a section name is given 
#		the values for usr, password and url will override the default values if supplied. The project name
#		must always be supplied in the section if a section is used.  If 'all' is supplied, Tegu will dig out 
#		a list of all tenants that are known to the default user and use those. The list will be refreshed
#		on a periodic basis, so adding a new tenant when 'all' is used will automatically be noticed. 
#
# 		Openstack credentials are supplied to Tegu using the default usr, passwd, and url values
#		or the values supplied in an overriding section. 
# 		openstack credentials that is used to gather information about the VMs and physical hosts.
#
# include_tenant is a boolean which when true causes Tegu to use tenant-ID/vmname and 
#		tenant-ID/IP-address combinations rather than using names and addresses alone.
#		default is false.
#
# require_token causes tegu to require that host names on a reservation request be of the form token/tenantid/hostname
#		and will confirm that the supplied token is valid for the tenant.  The tenant ID may be a project name.
:osif
	include_tenant = true
	require_token = true
	ostack_list = "all"
    url = "==OS_URL=="
    usr = "==OS_ADMIN=="
    passwd = "==OS_PASSWD=="

# These are sample credential sections that overrides the above defaults. When needed the section 
#	name is placed in the ostack_list in the default osif section (without the colon) and the 
#	values listed are applied to just that project.  When using a section, the project must
#	_always_ be included. 
#
# ---- big site projects ----
:ostack_bs_cqos
    url = "http://135.197.225.203:5000/"
    project = "cloudqos"
	# usr and password default to the above values

:ostack_bs_tmeeting
    url = "http://135.197.225.203:5000/"
    usr = "tegu"
    project = "t-meeting"
    passwd = "FooBar"
